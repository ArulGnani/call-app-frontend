{"version":3,"sources":["components/create-room-page/createRoom.js","components/room/room.js","App.js","index.js"],"names":["CreateRoom","useState","roomId","setRoomId","streamId","setStreamId","room","setRoom","useEffect","randomBytes","toString","to","id","htmlFor","type","value","disabled","name","defaultValue","onChange","e","target","onClick","Video","props","ref","useRef","peer","on","stream","current","srcObject","autoPlay","controls","width","height","Room","useParams","peers","setPeers","socketRef","userVideo","peersRef","roomID","io","connect","getStreamType","then","emit","users","console","log","forEach","userID","createPeer","push","peerID","payload","callerID","signal","addPeer","find","p","catch","err","alert","navigator","mediaDevices","getDisplayMedia","video","audio","getUserMedia","noiseSuppression","echoCancellation","userToSignal","Peer","initiator","trickle","incomingSignal","map","index","key","App","basename","process","path","exact","component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.12465420.chunk.js","sourcesContent":["import React,{ useState, useEffect } from \"react\";\r\nimport { randomBytes } from 'crypto'\r\nimport { Redirect } from \"react-router-dom\"\r\nimport './style/create-room.css'\r\n\r\nconst CreateRoom = () => {\r\n    const [roomId,setRoomId] = useState('')\r\n    const [streamId, setStreamId] = useState(2) \r\n    const [room, setRoom] = useState(false)\r\n\r\n    useEffect(() => {\r\n        setRoomId(randomBytes(10).toString('hex'))\r\n    }, [])\r\n\r\n    if (room) {\r\n        return ( <Redirect to={`/room/${roomId}/${streamId}`} /> )\r\n    }\r\n\r\n    return (\r\n        <section id=\"create-room-page\">\r\n            <div id=\"create-room\">\r\n            <label htmlFor=\"room-id\"> room id </label>\r\n            <input type=\"text\" value={roomId} disabled name=\"room-id\"/><br/>\r\n            <label htmlFor=\"stream-id\"> select what u want to stream </label>\r\n            <select name=\"stream-id\" defaultValue=\"2\" onChange={e => setStreamId(e.target.value)}>\r\n                <option value=\"1\"> share ur screen </option>\r\n                <option value=\"2\"> video call </option>\r\n                <option value=\"3\"> only audio </option>\r\n                <option value=\"4\"> only video </option>\r\n            </select>\r\n            <button onClick={() => setRoom(true)} id=\"btn\"> \r\n                create room \r\n            </button>\r\n            </div>\r\n        </section>\r\n    );\r\n};\r\n\r\nexport default CreateRoom;\r\n","import React, { useEffect, useRef, useState } from \"react\";\r\nimport io from \"socket.io-client\";\r\nimport Peer from \"simple-peer\";\r\nimport { useParams } from 'react-router-dom'\r\n\r\nconst Video = (props) => {\r\n    const ref = useRef();\r\n\r\n    useEffect(() => {\r\n        props.peer.on(\"stream\", stream => {\r\n            ref.current.srcObject = stream;\r\n        })\r\n    }, []);\r\n\r\n    return (\r\n        <div>\r\n            { props.streamId !== \"3\" ?\r\n              <video ref={ref} autoPlay controls width=\"400px\" height=\"300px\"/> :\r\n              <audio ref={ref} autoPlay controls/>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nconst Room = () => {\r\n    const { roomId, streamId } = useParams()\r\n    const [peers, setPeers] = useState([]);\r\n    const socketRef = useRef();\r\n    const userVideo = useRef();\r\n    const peersRef = useRef([]);\r\n    const roomID = roomId\r\n\r\n    useEffect(() => {\r\n        socketRef.current = io.connect(\"https://call-app-backend.herokuapp.com/\");\r\n        getStreamType().then(stream => {\r\n            userVideo.current.srcObject = stream;\r\n            \r\n            socketRef.current.emit(\"join room\", { roomID });\r\n            \r\n            socketRef.current.on(\"all users\", users => {\r\n                console.log('your id ->', socketRef.current.id)\r\n                console.log('all members room ->', users)\r\n\r\n                const peers = []; \r\n                users.forEach(userID => {\r\n                    const peer = createPeer(userID, socketRef.current.id, stream);\r\n                    peersRef.current.push({\r\n                        peerID: userID,\r\n                        peer,\r\n                    })\r\n                    peers.push(peer);\r\n                })\r\n                console.log('connected peers', peers)\r\n                setPeers(peers);\r\n            })\r\n\r\n            socketRef.current.on(\"user joined\", payload => {\r\n                console.log(`offer form ${payload.callerID}`, payload.signal) \r\n\r\n                const peer = addPeer(payload.signal, payload.callerID, stream);\r\n                peersRef.current.push({\r\n                    peerID: payload.callerID,\r\n                    peer,\r\n                })\r\n\r\n                setPeers(users => [...users, peer]);\r\n            });\r\n\r\n            socketRef.current.on(\"receiving returned signal\", payload => {\r\n                console.log(`answer to ${payload.id}`, payload.signal)\r\n                const item = peersRef.current.find(p => p.peerID === payload.id);\r\n                item.peer.signal(payload.signal);\r\n            });\r\n        })\r\n        .catch(err => {\r\n            alert(err)\r\n        })\r\n    }, []);\r\n\r\n    const getStreamType = ()=> {\r\n        switch (streamId) {\r\n            case \"1\":\r\n                return navigator.mediaDevices.getDisplayMedia({ \r\n                    video : true, audio : true\r\n                })\r\n            case \"2\":\r\n                return navigator.mediaDevices.getUserMedia({ \r\n                    video: { noiseSuppression : true },\r\n                    audio: { echoCancellation : true }\r\n                })\r\n            case \"3\":\r\n                return navigator.mediaDevices.getUserMedia({ \r\n                    video: false, audio: { echoCancellation : true } \r\n                })\r\n            case \"4\":\r\n                return navigator.mediaDevices.getUserMedia({ \r\n                    video: true, \r\n                    audio: false \r\n                })\r\n            default: return null\r\n        }\r\n    }\r\n\r\n\r\n    const createPeer = (userToSignal, callerID, stream) => {\r\n        const peer = new Peer({\r\n            initiator: true,\r\n            trickle: false,\r\n            stream,\r\n        });\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"sending signal\", { userToSignal, callerID, signal })\r\n        })\r\n\r\n        return peer;\r\n    }\r\n\r\n    const addPeer = (incomingSignal, callerID, stream) => {\r\n        const peer = new Peer({\r\n            initiator: false,\r\n            trickle: false,\r\n            stream,\r\n        })\r\n\r\n        peer.on(\"signal\", signal => {\r\n            socketRef.current.emit(\"returning signal\", { signal, callerID })\r\n        })\r\n\r\n        peer.signal(incomingSignal);\r\n\r\n        return peer;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            { streamId !== \"3\" ?\r\n              <video ref={userVideo} autoPlay controls width=\"400px\" height=\"300px\"/> :\r\n              <audio ref={userVideo} autoPlay controls/>\r\n            }\r\n             \r\n            {peers.map((peer, index) => {\r\n                console.log('connted - peer ->', peers)\r\n                return (\r\n                    <Video key={index} peer={peer} streamId={streamId}/>\r\n                );\r\n            })}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Room;","import React from 'react';\r\nimport { Route, Switch, HashRouter, BrowserRouter } from \"react-router-dom\";\r\nimport CreateRoom from \"./components/create-room-page/createRoom\";\r\nimport Room from \"./components/room/room\";\r\nimport './App.css'\r\n\r\nfunction App() {\r\n  return (\r\n    <HashRouter basename={process.env.PUBLIC_URL}> \r\n      <Switch>\r\n        <Route path=\"/\" exact component={CreateRoom} />\r\n        <Route path=\"/room/:roomId/:streamId\" component={Room} />\r\n      </Switch>\r\n    </HashRouter>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n"],"sourceRoot":""}